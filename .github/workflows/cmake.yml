# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1

    - name: Checkout picow-blink
      uses: actions/checkout@v4
      with:
        path: picow-blink

    - name: Checkout pico-sdk/develop
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        ref: develop
        path: pico-sdk
        
    - name: Checkout pico-sdk submodules
      working-directory: ${{github.workspace}}/pico-sdk
      run: git submodule update --init
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      working-directory: ${{github.workspace}}/picow-blink
      run:  cmake -E make_directory ${{github.workspace}}/picow-blink/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/picow-blink/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: PICO_SDK_PATH=../../pico-sdk cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l

    - name: Build
      working-directory: ${{github.workspace}}/picow-blink/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --parallel $(nproc)
      
    - name: Upload Pico Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uf2
        path: ${{github.workspace}}/picow-blink/build/**/*.uf2
        if-no-files-found: error
